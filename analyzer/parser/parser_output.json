{
  "variableDeclarations": [
    {
      "exported": true,
      "kind": "const",
      "declarators": [
        {
          "identifier": "PI",
          "type": {
            "type": "typeNode",
            "expression": " number"
          },
          "initValue": {
            "type": "numericLiteral",
            "expression": " 3.14",
            "data": "3.14"
          }
        }
      ],
      "raw": "export const PI: number = 3.14;",
      "sourceLocation": {
        "start": {
          "line": 0,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 0
        }
      }
    },
    {
      "exported": false,
      "kind": "let",
      "declarators": [
        {
          "identifier": "dynamicValue",
          "initValue": {
            "type": "stringLiteral",
            "expression": " 'hello world'",
            "data": "hello world"
          }
        }
      ],
      "raw": "\n\nlet dynamicValue = 'hello world';",
      "sourceLocation": {
        "start": {
          "line": 31,
          "column": 0
        },
        "end": {
          "line": 66,
          "column": 0
        }
      }
    },
    {
      "exported": false,
      "kind": "const",
      "declarators": [
        {
          "identifier": "appName",
          "type": {
            "type": "typeNode",
            "expression": " string"
          },
          "initValue": {
            "type": "stringLiteral",
            "expression": " 'Gemini AI'",
            "data": "Gemini AI"
          }
        }
      ],
      "raw": "\n\n// This is a line comment\nconst appName: string = 'Gemini AI';",
      "sourceLocation": {
        "start": {
          "line": 66,
          "column": 0
        },
        "end": {
          "line": 130,
          "column": 0
        }
      }
    },
    {
      "exported": true,
      "kind": "const",
      "source": {
        "type": "objectLiteral",
        "expression": " { name: 'bird', age: 20 }"
      },
      "declarators": [
        {
          "identifier": "name2",
          "propName": "name"
        },
        {
          "identifier": "age",
          "propName": "age"
        }
      ],
      "raw": "\n\nexport const { name: name2, age } = { name: 'bird', age: 20 };",
      "sourceLocation": {
        "start": {
          "line": 130,
          "column": 0
        },
        "end": {
          "line": 194,
          "column": 0
        }
      }
    },
    {
      "exported": false,
      "kind": "const",
      "source": {
        "type": "arrayLiteral",
        "expression": " [1, 2, 3]"
      },
      "declarators": [
        {
          "identifier": "first",
          "propName": "first"
        },
        {
          "identifier": "second",
          "propName": "second"
        },
        {
          "identifier": "reset",
          "propName": "reset"
        }
      ],
      "raw": "\n\nconst [first, second, ...reset] = [1, 2, 3];",
      "sourceLocation": {
        "start": {
          "line": 194,
          "column": 0
        },
        "end": {
          "line": 240,
          "column": 0
        }
      }
    },
    {
      "exported": false,
      "kind": "let",
      "source": {
        "type": "objectLiteral",
        "expression": " { config: { host: 'localhost', port: 8080 }, settings: ['dark'] }"
      },
      "declarators": [
        {
          "identifier": "host",
          "propName": "host"
        },
        {
          "identifier": "port",
          "propName": "port"
        },
        {
          "identifier": "theme",
          "propName": "theme"
        }
      ],
      "raw": "\n\nlet {\n  config: { host, port },\n  settings: [theme],\n} = { config: { host: 'localhost', port: 8080 }, settings: ['dark'] };",
      "sourceLocation": {
        "start": {
          "line": 240,
          "column": 0
        },
        "end": {
          "line": 365,
          "column": 0
        }
      }
    },
    {
      "exported": false,
      "kind": "const",
      "declarators": [
        {
          "identifier": "sayHi",
          "initValue": {
            "type": "arrowFunction",
            "expression": " () =\u003e {\n  console.log('sayHi')\n}"
          }
        }
      ],
      "raw": "\n\nconst sayHi = () =\u003e {\n  console.log('sayHi')\n}",
      "sourceLocation": {
        "start": {
          "line": 365,
          "column": 0
        },
        "end": {
          "line": 413,
          "column": 0
        }
      }
    }
  ],
  "jsxElements": []
}